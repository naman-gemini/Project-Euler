# It's quite similar to what we did in problem 549, just a lot easier
# We need to count all numbers which can be generated by any exponent combination product of first 100 primes
# Count number if product(p ^ k) < MAX ; p is prime < 100, k is exponent; product every possible combination

# Answer: 2944730; Time: 3.126953 seconds
require 'prime'

MAX = 10 ** 9
TYPE = 100

time = Time.now

$count = 1 # Including 1 already
$primes = Prime.each(TYPE).to_a

# n - current multiplication that is under consideration
# i - index of the prime number which needs to be looped upon
def solve(n, i)
  prev_n = n
  (i + 1).upto($primes.size - 1).each do |idx|
    new_p = $primes[idx]
    n = prev_n * new_p
    break if n > MAX # no need to check for next primes
    while n <= MAX
      $count += 1
      solve(n, idx)
      new_p *= $primes[idx]
      n = prev_n * new_p
    end
  end
end

$primes.each_with_index do |p, i|
  n = p
  while n <= MAX
    $count += 1
    solve(n, i)
    n *= p
  end
end

puts $count
puts "#{Time.now - time} seconds"